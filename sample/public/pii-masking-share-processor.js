!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";const t="#version 300 es\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\n\nvoid main() {\n  v_uv = a_texCoord;\n  gl_Position = vec4(a_position, 0.0, 1.0);\n}";function e(t,e,i){const r=t.createShader(e);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r));return r}function i(t,i,r){const o=t.createProgram();if(t.attachShader(o,e(t,t.VERTEX_SHADER,i)),t.attachShader(o,e(t,t.FRAGMENT_SHADER,r)),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(o));return o}function r(t){const e=[];let i=0;const r=2*t*t;for(let t=0;t<9;t++){const o=Math.exp(-t*t/r);e.push(o),i+=0===t?o:2*o}return e.map((t=>t/i))}class o extends ShareProcessor{constructor(t,e){super(t,e),t.onmessage=t=>{const{command:e,blurRegionNorm:i,blurRadius:o}=t.data;"update-blur-options"===e&&(console.log("Received update-blur-options:",{blurRegionNorm:i,blurRadius:o}),this.region=i,this.radius!==o&&(this.radius=o,("number"!=typeof this.radius||this.radius<=0)&&(this.radius=10),this.weights=r(this.radius),console.log("Updated blur radius to:",this.radius,"weights:",this.weights)))},this.region=e.blurRegionNorm||{x:.2,y:.2,width:.6,height:.6},this.radius=e.blurRadius||10,("number"!=typeof this.radius||this.radius<=0)&&(this.radius=10),this._inited=!1,this._contextLostHandler=null,this._contextRestoredHandler=null}onInit(){}onUninit(){if(console.log("PII processor onUninit called"),this.gl&&!this.gl.isContextLost()){const t=this.gl;this.texOrig&&(t.deleteTexture(this.texOrig),this.texOrig=null),this.tex&&(t.deleteTexture(this.tex),this.tex=null),this.tex2&&(t.deleteTexture(this.tex2),this.tex2=null),this.fbo&&(t.deleteFramebuffer(this.fbo),this.fbo=null),this.fbo2&&(t.deleteFramebuffer(this.fbo2),this.fbo2=null),this.vao&&(t.deleteVertexArray(this.vao),this.vao=null),this.progH&&(t.deleteProgram(this.progH),this.progH=null),this.progV&&(t.deleteProgram(this.progV),this.progV=null),this.progC&&(t.deleteProgram(this.progC),this.progC=null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindTexture(t.TEXTURE_2D,null),t.bindVertexArray(null),t.useProgram(null),this.uW=this.uO=this.uWV=this.uOV=null,this.uR=this.uOrig=this.uBlur=null}this.gl=null,this._inited=!1,this.weights=null,this.port&&(this.port.onmessage=null,this.port=null)}_handleContextLost=t=>{console.warn("WebGL context lost, preventing default"),t.preventDefault(),this._inited=!1,this.gl=null};_handleContextRestored=t=>{console.log("WebGL context restored, will reinitialize on next frame"),this._inited=!1};async processFrame(t,e){const i=t.codedWidth,r=t.codedHeight;e.width=i,e.height=r,this.region||(this.region={x:.2,y:.2,width:.6,height:.6},console.log("Region not set, using default:",this.region)),(!this.radius||this.radius<=0)&&(this.radius=10,console.log("Radius not set, using default:",this.radius)),this._inited||(this._initGL(e,i,r),this._inited=!0);const o=this.gl;if(!o||o.isContextLost()||!this.weights)return console.warn("WebGL context lost or weights not available"),t.close(),!0;o.viewport(0,0,i,r),o.bindTexture(o.TEXTURE_2D,this.texOrig),o.texImage2D(o.TEXTURE_2D,0,o.RGBA,o.RGBA,o.UNSIGNED_BYTE,t),o.bindVertexArray(this.vao),o.bindFramebuffer(o.FRAMEBUFFER,this.fbo),o.useProgram(this.progH),o.uniform1fv(this.uW,this.weights),o.uniform1f(this.uO,this.radius/8/i),o.activeTexture(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,this.texOrig),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.bindFramebuffer(o.FRAMEBUFFER,this.fbo2),o.useProgram(this.progV),o.uniform1fv(this.uWV,this.weights),o.uniform1f(this.uOV,this.radius/8/r),o.activeTexture(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,this.tex),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.bindFramebuffer(o.FRAMEBUFFER,null),o.useProgram(this.progC);const s=this.region||{x:.2,y:.2,width:.6,height:.6};return o.uniform4f(this.uR,s.x,s.y,s.width,s.height),o.uniform1i(this.uOrig,0),o.uniform1i(this.uBlur,1),o.activeTexture(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,this.texOrig),o.activeTexture(o.TEXTURE1),o.bindTexture(o.TEXTURE_2D,this.tex2),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.bindVertexArray(null),t.close(),!0}_initGL(e,o,s){const n=e.getContext("webgl2");this.gl=n,n.viewport(0,0,o,s),(!this.radius||this.radius<=0)&&(this.radius=10),this.weights=r(this.radius),console.log("GL initialized with radius:",this.radius,"weights:",this.weights),this.progH=i(n,t,"#version 300 es\n    precision mediump float;\n    in vec2 v_uv;\n    uniform sampler2D u_texture;\n    uniform float u_texelOffset;\n    uniform float u_weights[9];\n    out vec4 outColor;\n    void main() {\n      vec2 off = vec2(u_texelOffset, 0.0);\n      vec4 sum = texture(u_texture, v_uv) * u_weights[0];\n      for (int i = 1; i < 9; ++i) {\n        sum += texture(u_texture, v_uv + off * float(i)) * u_weights[i];\n        sum += texture(u_texture, v_uv - off * float(i)) * u_weights[i];\n      }\n      outColor = sum;\n    }"),this.progV=i(n,t,"#version 300 es\n    precision mediump float;\n    in vec2 v_uv;\n    uniform sampler2D u_texture;\n    uniform float u_texelOffset;\n    uniform float u_weights[9];\n    out vec4 outColor;\n    void main() {\n      vec2 off = vec2(0.0, u_texelOffset);\n      vec4 sum = texture(u_texture, v_uv) * u_weights[0];\n      for (int i = 1; i < 9; ++i) {\n        sum += texture(u_texture, v_uv + off * float(i)) * u_weights[i];\n        sum += texture(u_texture, v_uv - off * float(i)) * u_weights[i];\n      }\n      outColor = sum;\n    }"),this.progC=i(n,t,"#version 300 es\n    precision mediump float;\n    in vec2 v_uv;\n    uniform sampler2D u_orig;\n    uniform sampler2D u_blur;\n    uniform vec4 u_region;\n    out vec4 outColor;\n    void main() {\n      if (v_uv.x >= u_region.x && v_uv.x <= u_region.x + u_region.z &&\n          v_uv.y >= u_region.y && v_uv.y <= u_region.y + u_region.w) {\n        outColor = texture(u_blur, v_uv);\n      } else {\n        outColor = texture(u_orig, v_uv);\n      }\n    }"),this.uW=n.getUniformLocation(this.progH,"u_weights"),this.uO=n.getUniformLocation(this.progH,"u_texelOffset"),this.uWV=n.getUniformLocation(this.progV,"u_weights"),this.uOV=n.getUniformLocation(this.progV,"u_texelOffset"),this.uR=n.getUniformLocation(this.progC,"u_region"),this.uOrig=n.getUniformLocation(this.progC,"u_orig"),this.uBlur=n.getUniformLocation(this.progC,"u_blur"),this.texOrig=n.createTexture(),n.bindTexture(n.TEXTURE_2D,this.texOrig),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),this.tex=n.createTexture(),n.bindTexture(n.TEXTURE_2D,this.tex),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o,s,0,n.RGBA,n.UNSIGNED_BYTE,null),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),this.fbo=n.createFramebuffer(),n.bindFramebuffer(n.FRAMEBUFFER,this.fbo),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,this.tex,0),this.tex2=n.createTexture(),n.bindTexture(n.TEXTURE_2D,this.tex2),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,o,s,0,n.RGBA,n.UNSIGNED_BYTE,null),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),this.fbo2=n.createFramebuffer(),n.bindFramebuffer(n.FRAMEBUFFER,this.fbo2),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,this.tex2,0);const u=new Float32Array([-1,-1,0,1,1,-1,1,1,-1,1,0,0,1,1,1,0]);this.vao=n.createVertexArray();const a=n.createBuffer();n.bindVertexArray(this.vao),n.bindBuffer(n.ARRAY_BUFFER,a),n.bufferData(n.ARRAY_BUFFER,u,n.STATIC_DRAW);const h=n.getAttribLocation(this.progH,"a_position"),l=n.getAttribLocation(this.progH,"a_texCoord");n.enableVertexAttribArray(h),n.vertexAttribPointer(h,2,n.FLOAT,!1,16,0),n.enableVertexAttribArray(l),n.vertexAttribPointer(l,2,n.FLOAT,!1,16,8),n.bindVertexArray(null)}}registerProcessor("pii-masking-share-processor",o)}));
