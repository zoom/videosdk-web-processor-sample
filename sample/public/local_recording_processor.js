!function(s){"function"==typeof define&&define.amd?define(s):s()}((function(){"use strict";class s extends AudioProcessor{#s=48e3;constructor(s,e){super(s,e),this.recordedData=[],this.isRecording=!1,this.sampleRate=0,this.numChannels=0,this.port.onmessage=s=>{const{command:e,config:n}=s.data;"start"===e?(this.isRecording=!0,this.recordedData=[],n?(this.sampleRate=n.sampleRate,this.numChannels=n.numChannels||2):(this.sampleRate=this.#s,this.numChannels=2),this.port.postMessage({type:"status",message:"local recording is started..."})):"stop"===e&&(this.isRecording=!1,this.port.postMessage({type:"status",message:"local recording is stopped..."}))}}onInit(){console.log("local recording audio processor init")}onUninit(){console.log("local recording audio processor uninit")}process(s,e,n){if(!this.isRecording||0===this.numChannels)return!0;const t=s[0];if(!t||0===t.length)return console.warn("no input channels"),!0;const o=t.length;if(0===o||!t[0]||0===t[0].length)return console.warn("first input channel is empty, no data!"),!0;const i=Math.min(o,this.numChannels),r=[];for(let s=0;s<i;s++)t[s]&&t[s].length>0&&r.push(t[s].slice());return!0}}registerProcessor("local_recording_audio_processor",s)}));
