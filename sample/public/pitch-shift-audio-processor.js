!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";class t extends AudioProcessor{pitchRatio;bufferSize;buffer;writePos;readPos;formantRatio;dryWet;hpf;outputBuffer;outputBufferSize;outputWritePos;sampleRate;isTransmitting;transmitInterval;lastTransmitTime;smoothingBuffer;smoothingSize;smoothingIndex;isBufferReady;minBufferFill;positionCheckCounter;lastLatencyReport;processingStartTime;constructor(t,i){super(t,i),this.bufferSize=48e3,this.buffer=new Float32Array(this.bufferSize),this.writePos=0,this.readPos=this.bufferSize/4,this.pitchRatio=1.8,this.formantRatio=0,this.dryWet=0,this.hpf={prevIn:0,prevOut:0,alpha:.95},this.sampleRate=48e3,this.outputBufferSize=Math.floor(.05*this.sampleRate),this.outputBuffer=new Float32Array(this.outputBufferSize),this.outputWritePos=0,this.isTransmitting=!1,this.transmitInterval=Math.floor(.01*this.sampleRate),this.lastTransmitTime=0,this.smoothingSize=32,this.smoothingBuffer=new Float32Array(this.smoothingSize),this.smoothingIndex=0,this.isBufferReady=!1,this.minBufferFill=this.bufferSize/8,this.positionCheckCounter=0,this.lastLatencyReport=0,this.processingStartTime=0,this.port.onmessage=t=>{const i=t.data.command;if("update-pitch-shift-config"===i){const i=this.pitchRatio;this.pitchRatio=t.data.data.pitchRatio,this.formantRatio=t.data.data.formantRatio,this.dryWet=t.data.data.dryWet,console.log(`[PitchShift] Config updated: pitch ${i} → ${this.pitchRatio}, formant: ${this.formantRatio}, dryWet: ${this.dryWet}`);const s=i>1,e=this.pitchRatio>1;s!==e?(console.log(`[PitchShift] Pitch boundary crossed (${s?">1":"<=1"} → ${e?">1":"<=1"}), adjusting strategy`),this.resetBufferPositions()):this.positionCheckCounter=0}else"start-transmission"===i?(this.isTransmitting=!0,this.outputWritePos=0,this.lastTransmitTime=0,this.resetBufferPositions(),console.log("[PitchShift] Started audio transmission - AudioWorklet will be muted, only main thread playback")):"stop-transmission"===i?(this.isTransmitting=!1,console.log("[PitchShift] Stopped audio transmission - AudioWorklet direct output resumed")):"start-preview"===i?(this.isTransmitting=!0,this.resetBufferPositions(),console.log("[PitchShift] Preview playback started - AudioWorklet muted, main thread active")):"stop-preview"===i&&(this.isTransmitting=!1,console.log("[PitchShift] Preview playback stopped - AudioWorklet direct output resumed"))}}applySmoothingFilter(t){const i=this.smoothingIndex%this.smoothingSize;this.smoothingBuffer[i]=t,this.smoothingIndex++;let s=0,e=0;const o=Math.min(this.smoothingSize,this.smoothingIndex),h=Math.min(8,o);for(let t=0;t<h;t++){const o=(i-t+this.smoothingSize)%this.smoothingSize;s+=this.smoothingBuffer[o],e++}return e>0?s/e:t}transmitAudioData(t=!1){if(!this.isTransmitting)return;const i=this.lastTransmitTime+128;if((t||i-this.lastTransmitTime>=this.transmitInterval)&&this.outputWritePos>0)try{const t=new Float32Array(this.outputWritePos);t.set(this.outputBuffer.subarray(0,this.outputWritePos)),this.port.postMessage({command:"preview",audioData:t,sampleRate:this.sampleRate,timestamp:i,bufferSize:this.outputWritePos}),this.outputWritePos=0,this.lastTransmitTime=i}catch(t){console.error("[PitchShift] Error transmitting audio data:",t)}}validateAndFixSample(t){return isFinite(t)?Math.max(-1,Math.min(1,t)):0}manageReadWritePositions(){this.positionCheckCounter++;let t=48;if(this.pitchRatio>2?t=16:this.pitchRatio>1.5?t=24:this.pitchRatio>1.2&&(t=32),this.positionCheckCounter<t)return!0;this.positionCheckCounter=0;let i=this.writePos-this.readPos;i<0&&(i+=this.bufferSize);let s=3072;this.pitchRatio>1&&(this.pitchRatio<=1.5?s+=2048*(this.pitchRatio-1):this.pitchRatio<=2.5?s+=1024+3072*(this.pitchRatio-1.5):s+=4096+4096*(this.pitchRatio-2.5));const e=Math.min(s,this.bufferSize/6);if(i<e){if(console.warn(`[PitchShift] Position collision detected (distance: ${i}, required: ${e}, pitch: ${this.pitchRatio})`),!(this.pitchRatio>1))return!1;{const t=(this.writePos-e+this.bufferSize)%this.bufferSize;console.log(`[PitchShift] Adjusting readPos from ${this.readPos} to ${t} for pitch ${this.pitchRatio}`),this.readPos=t}}return!0}resetBufferPositions(){if(console.log(`[PitchShift] Smart reset for pitch ratio: ${this.pitchRatio}`),this.positionCheckCounter=0,this.pitchRatio>1){console.log("[PitchShift] Pitch > 1.0 detected, applying safe position strategy");let t=3072;this.pitchRatio<=1.5?t+=2048*(this.pitchRatio-1):this.pitchRatio<=2.5?t+=1024+3072*(this.pitchRatio-1.5):t+=4096+4096*(this.pitchRatio-2.5),t=Math.min(t,this.bufferSize/6),this.readPos=(this.writePos-t+this.bufferSize)%this.bufferSize,this.isBufferReady=!1,this.pitchRatio>2?this.minBufferFill=Math.min(this.bufferSize/12,.8*t):this.minBufferFill=Math.min(this.bufferSize/16,.6*t),console.log(`[PitchShift] Reset positions: writePos=${this.writePos}, readPos=${this.readPos}, safeDistance=${t}, minBufferFill=${this.minBufferFill}`)}else console.log("[PitchShift] Pitch <= 1.0, minimal reset"),this.isBufferReady||(this.isBufferReady=!1);this.hpf.prevIn=0,this.hpf.prevOut=0,this.smoothingIndex=0}process(t,i){const s=t[0],e=i[0];if(0===s.length||!s[0])return!0;const o=s[0],h=e[0],r=o.length;if(Math.abs(this.pitchRatio-1)<.01&&this.dryWet<.01)for(let t=0;t<r;t++){const i=this.validateAndFixSample(o[t]);this.isTransmitting?(h[t]=0,this.outputWritePos<this.outputBufferSize&&(this.outputBuffer[this.outputWritePos]=i,this.outputWritePos++)):h[t]=i}else{for(let t=0;t<r;t++)this.buffer[this.writePos]=o[t],this.writePos=(this.writePos+1)%this.bufferSize;if(!this.isBufferReady){const t=this.writePos>=this.minBufferFill?this.writePos:this.writePos+this.bufferSize;if(!(t>=this.minBufferFill))return h.fill(0),!0;this.isBufferReady=!0,console.log(`[PitchShift] Buffer ready (filled: ${t}/${this.bufferSize}, pitch: ${this.pitchRatio})`)}const t=this.manageReadWritePositions();for(let i=0;i<r;i++){let s=0;if(t||this.positionCheckCounter>0){let t=this.readPos%this.bufferSize;t<0&&(t+=this.bufferSize);const i=Math.floor(t),e=t-i,o=(i+1)%this.bufferSize,h=(this.buffer[i]||0)*(1-e)+(this.buffer[o]||0)*e;if(this.dryWet<.01)s=h;else{const t=h-this.hpf.prevIn+this.hpf.alpha*this.hpf.prevOut;this.hpf.prevIn=h,this.hpf.prevOut=t,s=t*this.dryWet+h*(1-this.dryWet)}let r=this.pitchRatio;if(this.pitchRatio>1){const t=(this.writePos-this.readPos+this.bufferSize)%this.bufferSize;this.pitchRatio>1.8&&(t<.2*this.bufferSize?r=.8*this.pitchRatio:t<.3*this.bufferSize&&(r=.9*this.pitchRatio));const i=this.readPos+r,s=Math.floor(this.readPos);Math.floor(i%this.bufferSize)===s&&(r=Math.ceil(this.readPos)-this.readPos+.1)}else r=Math.max(r,.1);this.readPos+=r,this.readPos>=this.bufferSize&&(this.readPos-=this.bufferSize),this.readPos<0&&(this.readPos+=this.bufferSize)}else s=0;s=this.validateAndFixSample(s),this.dryWet>.01&&0!==s&&(s=this.applySmoothingFilter(s)),this.isTransmitting?(h[i]=0,this.outputWritePos<this.outputBufferSize&&(this.outputBuffer[this.outputWritePos]=s,this.outputWritePos++)):h[i]=s}}const a=Date.now();if(a-this.lastLatencyReport>1e3){const t=this.outputWritePos/this.sampleRate*1e3,i=(this.writePos-this.readPos+this.bufferSize)%this.bufferSize/this.sampleRate*1e3;let s=3072;this.pitchRatio<=1.5?s+=2048*(this.pitchRatio-1):this.pitchRatio<=2.5?s+=1024+3072*(this.pitchRatio-1.5):s+=4096+4096*(this.pitchRatio-2.5);const e=s/this.sampleRate*1e3;console.log(`[PitchShift] Latency Report - Pitch: ${this.pitchRatio.toFixed(1)}, Output: ${t.toFixed(1)}ms, Ring: ${i.toFixed(1)}ms, Safe: ${e.toFixed(1)}ms`),this.lastLatencyReport=a}return this.transmitAudioData(),this.outputWritePos>=.4*this.outputBufferSize&&this.transmitAudioData(!0),!0}}registerProcessor("pitch-shift-audio-processor",t)}));
