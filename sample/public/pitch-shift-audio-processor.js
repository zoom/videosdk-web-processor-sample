!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";class t extends AudioProcessor{pitchRatio;bufferSize;buffer;writePos;readPos;formantRatio;dryWet;hpf;outputBuffer;outputBufferSize;outputWritePos;sampleRate;isTransmitting;transmitInterval;lastTransmitTime;smoothingBuffer;smoothingSize;smoothingIndex;samplesProcessed;minReadDelay;constructor(t,i){super(t,i),this.bufferSize=48e3,this.buffer=new Float32Array(this.bufferSize),this.writePos=0,this.readPos=0,this.pitchRatio=1,this.formantRatio=0,this.dryWet=0,this.hpf={prevIn:0,prevOut:0,alpha:.95},this.sampleRate=48e3,this.outputBufferSize=Math.floor(.05*this.sampleRate),this.outputBuffer=new Float32Array(this.outputBufferSize),this.outputWritePos=0,this.isTransmitting=!1,this.transmitInterval=Math.floor(.01*this.sampleRate),this.lastTransmitTime=0,this.samplesProcessed=0,this.minReadDelay=Math.floor(.1*this.sampleRate),this.smoothingSize=32,this.smoothingBuffer=new Float32Array(this.smoothingSize),this.smoothingIndex=0,this.port.onmessage=t=>{const i=t.data.command;"update-pitch-shift-config"===i?(this.pitchRatio=t.data.data.pitchRatio,this.formantRatio=t.data.data.formantRatio,this.dryWet=t.data.data.dryWet):"start-transmission"===i||"start-preview"===i?(this.isTransmitting=!0,console.log("[PitchShift] Started audio transmission/preview.")):"stop-transmission"!==i&&"stop-preview"!==i||(this.isTransmitting=!1,console.log("[PitchShift] Stopped audio transmission/preview."))}}applySmoothingFilter(t){const i=this.smoothingIndex%this.smoothingSize;this.smoothingBuffer[i]=t,this.smoothingIndex++;let s=0,e=0;const o=Math.min(this.smoothingSize,this.smoothingIndex),h=Math.min(8,o);for(let t=0;t<h;t++){const o=(i-t+this.smoothingSize)%this.smoothingSize;s+=this.smoothingBuffer[o],e++}return e>0?s/e:t}transmitAudioData(t=!1){if(!this.isTransmitting)return;const i=Math.max(Math.floor(.005*this.sampleRate),Math.floor(this.transmitInterval/Math.max(1,.5*this.pitchRatio))),s=this.samplesProcessed;if((t||s-this.lastTransmitTime>=i||this.outputWritePos>=.6*this.outputBufferSize)&&this.outputWritePos>0)try{const t=new Float32Array(this.outputWritePos);t.set(this.outputBuffer.subarray(0,this.outputWritePos)),this.port.postMessage({command:"preview",audioData:t,sampleRate:this.sampleRate,timestamp:s,bufferSize:this.outputWritePos,pitchRatio:this.pitchRatio}),this.outputWritePos=0,this.lastTransmitTime=s}catch(t){console.error("[PitchShift] Error transmitting audio data:",t)}}validateAndFixSample(t){return isFinite(t)?Math.max(-1,Math.min(1,t)):0}process(t,i){const s=t[0],e=i[0];if(0===s.length||!s[0])return!0;const o=s[0],h=e[0],r=o.length;if(Math.abs(this.pitchRatio-1)<.01&&this.dryWet<.01)for(let t=0;t<r;t++){const i=this.validateAndFixSample(o[t]);h[t]=i,this.isTransmitting&&this.outputWritePos<this.outputBufferSize&&(this.outputBuffer[this.outputWritePos]=i,this.outputWritePos++)}else{for(let t=0;t<r;t++)this.buffer[this.writePos]=o[t],this.writePos=(this.writePos+1)%this.bufferSize;for(let t=0;t<r;t++){const i=(this.writePos-this.readPos+this.bufferSize)%this.bufferSize,s=128;this.pitchRatio>1&&i<s&&(this.readPos=(this.writePos-s+this.bufferSize)%this.bufferSize);let e=this.readPos%this.bufferSize;e<0&&(e+=this.bufferSize);let o;if((this.writePos-e+this.bufferSize)%this.bufferSize<2)o=0;else{const t=Math.floor(e),i=e-t,s=(t+1)%this.bufferSize,h=this.buffer[t]*(1-i)+this.buffer[s]*i;if(this.dryWet<.01)o=h;else{const t=h-this.hpf.prevIn+this.hpf.alpha*this.hpf.prevOut;this.hpf.prevIn=h,this.hpf.prevOut=t,o=t*this.dryWet+h*(1-this.dryWet)}o=this.validateAndFixSample(o),this.dryWet>.01&&this.pitchRatio>1.5&&(o=this.applySmoothingFilter(o))}h[t]=o,this.isTransmitting&&this.outputWritePos<this.outputBufferSize&&(this.outputBuffer[this.outputWritePos]=o,this.outputWritePos++),this.readPos+=this.pitchRatio,this.readPos>=this.bufferSize&&(this.readPos-=this.bufferSize)}}return this.samplesProcessed+=r,this.transmitAudioData(),!0}}registerProcessor("pitch-shift-audio-processor",t)}));
